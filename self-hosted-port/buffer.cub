class TokenBufferEntry {
  Token token;
  TokenBufferEntry next;
}

// L_EOF
class TokenBuffer {
  Token eof;
  TokenBufferEntry head, tail, lookahead;
}

TokenBuffer newTokenBuffer() {
  return new TokenBuffer(null, null, null, null);
}

Token bufferPeek(TokenBuffer state) {
  if (state.eof != null) {
    return state.eof;
  }

  if (state.head != null) {
    return state.head.token;
  }

  Token token = scan();

  if (token == null) {
    return state.eof = new Token(L_EOF);
  }

  state.head = (state.tail = new TokenBufferEntry(token, null));
  return token;
}

Token bufferShift(TokenBuffer state) {
  if (state.eof != null) {
    return state.eof;
  }

  TokenBufferEntry head = state.head;
  if (head != null) {
    TokenBufferEntry next = head.next;
    state.head = next;
    if (next == null) {
      state.tail = null;
    }
    return head.token;
  }

  Token token = scan();
  return token == null ? (state.eof = new Token(L_EOF)) : token;
}

void bufferPush(TokenBuffer state, Token token) {
  state.eof = null;

  TokenBufferEntry head = state.head,
    entry = new TokenBufferEntry(token, head);
  state.head = entry;
  if (head == null) {
    state.tail = entry;
  }
}

void startBufferLookahead(TokenBuffer state) {
  state.lookahead = state.head;
}

bool bufferLookahead(TokenBuffer state, u8 tokenType) {
  TokenBufferEntry entry = state.lookahead;

  if (entry != null) {
    if (entry.token.type != tokenType) {
      return false;
    }

    state.lookahead = entry.next;
    return true;
  }

  Token token = scan();

  if (token == null) {
    return tokenType == L_EOF;
  }

  // this really shouldn't be necessary but just in case
  state.eof = null;

  entry = new TokenBufferEntry(token, null);

  TokenBufferEntry tail = state.tail;
  if (tail == null) {
    state.head = entry;
  } else {
    tail.next = entry;
  }
  state.tail = entry;

  return token.type == tokenType;
}

Token accept(TokenBuffer state, u8 tokenType) {
  Token token = parsePeek(state);

  if (token.type == type) {
    parseShift(state);
    return token;
  }

  return null;
}

Token expect(TokenBuffer state, u8 tokenType) {
  Token token = parseShift(state);

  if (token.type != tokenType) {
    print("expected token '#{tokenType}', found '#{token.type}'");
    exit(1);
  }

  return token;
}

string expectIdentifier(TokenBuffer state) {
  return expect(state, L_IDENTIFIER).valueString;
}
