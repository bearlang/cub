string[] keywords = new string[14];
keywords[0] = "as";
keywords[1] = "break";
keywords[2] = "case";
keywords[3] = "class";
keywords[4] = "continue";
keywords[5] = "do";
keywords[6] = "else";
keywords[7] = "extends";
keywords[8] = "for";
keywords[9] = "if";
keywords[10] = "let";
keywords[11] = "native";
keywords[12] = "new";
keywords[13] = "return";
keywords[14] = "while";

u8[] keywordMap = new u8[14];
keywordMap[0] = L_AS;
keywordMap[1] = L_BREAK;
keywordMap[2] = L_CASE;
keywordMap[3] = L_CLASS;
keywordMap[4] = L_CONTINUE;
keywordMap[5] = L_DO;
keywordMap[6] = L_ELSE;
keywordMap[7] = L_EXTENDS;
keywordMap[8] = L_FOR;
keywordMap[9] = L_IF;
keywordMap[10] = L_LET;
keywordMap[11] = L_NATIVE;
keywordMap[12] = L_NEW;
keywordMap[13] = L_RETURN;
keywordMap[14] = L_WHILE;

string[] types = new string[14];
types[0] = "bool";
types[1] = "f128";
types[2] = "f32";
types[3] = "f64";
types[4] = "s16";
types[5] = "s32";
types[6] = "s64";
types[7] = "s8";
types[8] = "string";
types[9] = "u16";
types[10] = "u32";
types[11] = "u64";
types[12] = "u8";
types[13] = "void";

u8[] typeMap = new u8[14];
typeMap[0] = T_BOOL;
typeMap[1] = T_F128;
typeMap[2] = T_F32;
typeMap[3] = T_F64;
typeMap[4] = T_S16;
typeMap[5] = T_S32;
typeMap[6] = T_S64;
typeMap[7] = T_S8;
typeMap[8] = T_STRING;
typeMap[9] = T_U16;
typeMap[10] = T_U32;
typeMap[11] = T_U64;
typeMap[12] = T_U8;
typeMap[13] = T_VOID;

Token scan(Stream in) {
  u8 chr;

  // handle whitespace and comments
  for (;;) {
    chr = streamShift(in);
    if (chr == 0x2f) { // '/'
      chr = streamShift(in);
      if (chr == 0x2f) { // '/'
        do chr = streamShift(in);
        while (chr != 0xa); // '\n'
      } else if (chr == 0x2a) { // '*'
        consumeComment(in);
      } else {
        streamPush(in, chr);
        chr = 0x2f; // '/'
        break;
      }
    } else {
      // ' ', '\t'
      if (chr == 0x20 || chr == 0x9) continue;
      if (chr == 0) return null;
      // '\n'
      if (chr != 0xa) break;
    }
  }

  u8 tokenType;
  u32 offset = in.offset - 1;

  // '.'
  if (chr == 0x2e) {
    chr = streamShift(in);
    // works with EOF too ('0', '9')
    if (chr < 0x30 || chr > 0x39) {
      streamPush(in, chr);
      return newToken(in, L_DOT);
    }

    streamPush(in, chr);
    streamPush(in, 0x2e); // '.'
    return scanNumber(in);
  }

  // [0-9]
  if (chr >= 0x30 && chr <= 0x39) {
    streamPush(in, chr);
    return scanNumber(in);
  }

  // [A-Za-z_]
  if ((chr >= 0x41 && chr <= 0x5a) || (chr >= 0x61 && chr <= 0x7a) ||
      chr == 0x5f) {
    streamPush(in, chr);
    return scanWord(in);
  }

  // ["']
  if (chr == 0x22 || chr == 0x27) {
    // TODO: interpolation
    return scanString(in, chr);
  }

  // '#'
  if (chr == 0x23) {
    // accept '='
    return acceptChar(in, 0x3d)
      ? newToken(in, L_STR_CONCAT_ASSIGN)
      : newToken(in, L_STR_CONCAT);
  }

  // '!'
  if (chr == 0x21) {
    // accept '='
    tokenType = (acceptChar(in, 0x3d) ? L_NE : L_NOT);
  }

  // '>'
  else if (chr == 0x3e) {
    tokenType = (acceptChar(in, 0x3e) // '>'
      ? acceptChar(in, 0x3e) // '>'
        ? acceptChar(in, 0x3d) ? L_RSHIFT_ASSIGN : L_RSHIFT // '='
        : (acceptChar(in, 0x3d) ? L_ASHIFT_ASSIGN : L_ASHIFT) // '='
      : (acceptChar(in, 0x3d) ? L_GTE : L_GT)); // '='
  }

  // '<'
  else if (chr == 0x3c) {
    tokenType = (acceptChar(in, 0x3c) // '<'
      ? acceptChar(in, 0x3d) ? L_LSHIFT_ASSIGN : L_LSHIFT // '='
      : (acceptChar(in, 0x3d) ? L_LTE : L_LT)); // '='
  }

  // '%'
  else if (chr == 0x25) {
    tokenType = (acceptChar(in, 0x3d) ? L_MOD_ASSIGN : L_MOD); // '='
  }

  // '&'
  else if (chr == 0x26) {
    tokenType = (acceptChar(in, 0x26) // '&'
      ? L_AND
      : (acceptChar(in, 0x3d) ? L_BITWISE_AND_ASSIGN : L_BITWISE_AND)); // '='
  }

  // '*'
  else if (chr == 0x2a) {
    tokenType = (acceptChar(in, 0x3d) ? L_MUL_ASSIGN : L_MUL); // '='
  }

  // '+'
  else if (chr == 0x2b) {
    tokenType = (acceptChar(in, 0x2b) // '+'
      ? L_INCREMENT
      : (acceptChar(in, 0x3d) ? L_ADD_ASSIGN : L_ADD)); // '='
  }

  // '-'
  else if (chr == 0x2d) {
    tokenType = (acceptChar(in, 0x2d) // '-'
      ? L_DECREMENT
      : (acceptChar(in, 0x3d) ? L_SUB_ASSIGN : L_SUB)); // '='
  }

  // '/'
  else if (chr == 0x2f) {
    tokenType = (acceptChar(in, 0x3d) ? L_DIV_ASSIGN : L_DIV); // '='
  }

  // '='
  else if (chr == 0x3d) {
    tokenType = (acceptChar(in, 0x3d) ? L_EQ : L_ASSIGN); // '='
  }

  // '^'
  else if (chr == 0x5e) {
    tokenType = (acceptChar(in, 0x5e) // '^'
      ? L_XOR
      : (acceptChar(in, 0x3d) ? L_BITWISE_XOR_ASSIGN : L_BITWISE_XOR)); // '='
  }

  // '|'
  else if (chr == 0x7c) {
    tokenType = (acceptChar(in, 0x7c) // '|'
      ? L_OR
      : (acceptChar(in, 0x3d) ? L_BITWISE_OR_ASSIGN : L_BITWISE_OR)); // '='
  }

  else if (chr == 0x28) tokenType = L_OPEN_PAREN;    // '('
  else if (chr == 0x29) tokenType = L_CLOSE_PAREN;   // ')'
  else if (chr == 0x2c) tokenType = L_COMMA;         // ','
  else if (chr == 0x3a) tokenType = L_COLON;         // ':'
  else if (chr == 0x3b) tokenType = L_SEMICOLON;     // ';'
  else if (chr == 0x3f) tokenType = L_TERNARY;       // '?'
  else if (chr == 0x5b) tokenType = L_OPEN_BRACKET;  // '['
  else if (chr == 0x5d) tokenType = L_CLOSE_BRACKET; // ']'
  else if (chr == 0x7b) tokenType = L_OPEN_BRACE;    // '{'
  else if (chr == 0x7d) tokenType = L_CLOSE_BRACE;   // '}'
  else if (chr == 0x7e) tokenType = L_BITWISE_NOT;   // '~'

  else {
    // TODO: line numbers
    print("unexpected character '#{string.fromCode(chr)}' on line #{}");
    exit(1);
  }

  Token token = newToken(in, tokenType);
  token.offset = offset;
  return token;
}

// TODO: optimize (use maps!)
Token scanWord(Stream in) {
  u32 bufferUsed = 0;
  u8[] buffer = new u8[16];

  u32 offset = in.offset;

  u8 chr = streamShift(in);
  do {
    if (bufferUsed == buffer.length) {
      buffer.length *= 2;
    }

    buffer[bufferUsed++] = chr;
    chr = streamShift(in);
  } while ((chr >= 0x41 && chr <= 0x5a) || (chr >= 0x61 && chr <= 0x7a) ||
    (chr >= 0x30 && chr <= 0x39) || chr == 0x5f);

  streamPush(in, chr);

  string word = stringFromArray(buffer, 0, bufferUsed);
  Token token;

  // TODO: signal lexer from parser to indicate whether identifier expected
  // e.g. if we just read a L_DOT, we want to use the word as an identifier
  for (u32 i = 0; i < keywords.length; ++i) {
    if (word == keywords[i]) {
      token = newToken(in, keywordMap[i]);
      token.offset = offset;
      return token;
    }
  }

  for (u32 i = 0; i < types.length; ++i) {
    if (word == types[i]) {
      token = newToken(in, L_TYPE);
      token.offset = offset;
      token.literalType = typeMap[i];
      return token;
    }
  }

  if (word == "true") {
    token = newToken(in, L_LITERAL);
    token.literalType = T_BOOL;
    token.valueBool = true;
  } else if (word == "false") {
    token = newToken(in, L_LITERAL);
    token.literalType = T_BOOL;
    token.valueBool = false;
  } else if (word == "null") {
    // null implied - no other literal objects
    token = newToken(in, L_LITERAL);
    token.literalType = T_OBJECT;
  } else {
    token = newToken(in, L_IDENTIFIER);
    token.valueString = word;
  }

  token.offset = offset;
  return token;
}

Token scanString(Stream in, u8 match) {
  u8 chr;

  u32 bufferUsed;
  u8[] buffer;

  for (;;) {
    chr = streamShift(in);

    // TODO: handle nulls correctly (byproduct of correct unicode handling)
    if (chr == 0) {
      // TODO: line numbers
      print("unexpected EOF, expecting character");
      exit(1);
    }

    if (chr == match) {
      break;
    }

    // '\\'
    if (chr != 0x5c) {
      if (bufferUsed == buffer.length) {
        buffer.length *= 2;
      }

      buffer[bufferUsed++] = chr;
      continue;
    }

    chr = streamShift(in);

    u8 append;
    if (chr == 0x22) append = 0x22; // '"'
    else if (chr == 0x30) append = 0; // '0' -> '\0'
    else if (chr == 0x27) append = 0x27; // '\''
    else if (chr == 0x5c) append = 0x5c; // '\\'
    else if (chr == 0x62) append = 0x8; // 'b' -> '\b'
    else if (chr == 0x66) append = 0xc; // 'f' -> '\f'
    else if (chr == 0x6e) append = 0xa; // 'n' -> '\n'
    else if (chr == 0x72) append = 0xd; // 'r' -> '\r'
    else if (chr == 0x74) append = 0x9; // 't' -> '\t'
    else if (chr == 0x76) append = 0xb; // 'v' -> '\v'
    else if (chr == 0x75) { // 'u'
      // TODO: line numbers
      print("unicode not implemented");
      exit(1);
    } else if (chr == 0xa) { // '\n'
      // TODO: line numbers
      print("expected escape sequence, found newline");
      exit(1);
    } else if (chr == 0x78) { // 'x'
      append = <u8>((expectHexDigit(in) << 4) | expectHexDigit(in));
    } else {
      print("unexpected character #{string.fromCode(chr)}, expected escape " #
        "sequence");
      exit(1);
    }

    if (bufferUsed == buffer.length) {
      buffer.length *= 2;
    }

    buffer[bufferUsed++] = append;
  }

  Token token = newToken(in, L_LITERAL);
  token.literalType = T_STRING;
  token.valueString = stringFromArray(buffer, 0, bufferUsed);
  return token;
}

Token scanNumber(Stream in) {
  u32 offset = in.offset;
  Token token = scanNumberInner(in);
  token.offset = offset;
  return token;
}

Token scanNumberInner(Stream in) {
  u8 chr = streamShift(in);

  // '0'
  if (chr == 0x30) {
    chr = streamShift(in);

    // [\.Ee]
    if (chr == 0x2e || chr == 0x45 || chr == 0x65) {
      // TODO: floating-point numbers
      print("floating point literals are not implemented");
      exit(1);
    }

    // 'x'
    if (chr == 0x78) {
      bool any = false;
      u64 value = 0;

      for (;;) {
        chr = streamShift(in);

        // [0-9]
        if (chr >= 0x30 && chr <= 0x39) {
          u64 v2 = value << 4;
          if ((v2 >> 4) != value) {
            // TODO: line number
            print("hex literal too large");
            exit(1);
          }

          any = true;
          value = v2 | (chr - 0x30); // '0'
          continue;
        }

        u8 _chr = chr | 0x20; // lowercase
        // [a-f]
        if (_chr >= 0x61 && _chr <= 0x66) {
          u64 v2 = value << 4;
          if ((v2 >> 4) != value) {
            // TODO: line number
            print("hex literal too large");
            exit(1);
          }

          any = true;
          value = v2 | (chr - 0x57);
          continue;
        }

        // handles EOF
        streamPush(in, chr);
        break;
      }

      if (!any) {
        // TODO: line number
        print("unexpected EOF, expecting [0-9a-f]");
        exit(1);
      }

      return newIntegerToken(in, value, integerBits(value));
    }

    // 'b'
    if (chr == 0x62) {
      bool any = false;
      u64 value = 0;

      for (;;) {
        chr = streamShift(in);

        // [^01]
        if ((chr | 1) != 0x31) {
          // [0-9]
          if (chr >= 0x30 && chr <= 0x39) {
            // TODO: line number
            print("bad binary literal");
            exit(1);
          }

          if (!any) {
            // TODO: line number
            // TODO: might not be EOF
            print("unexpected EOF, expecting [01]");
            exit(1);
          }

          streamPush(in, chr);
          break;
        }

        u64 v2 = value << 1;
        if ((v2 >> 1) != value) {
          // TODO: line number
          print("binary literal too large");
          exit(1);
        }

        any = true;
        value = v2 | (chr - 0x30); // '0'
      }

      return newIntegerToken(in, value, integerBits(value));
    }

    // 'o'
    if (chr == 0x6f) {
      // TODO: octal literals
      print("octal literals not implemented");
      exit(1);
    }

    if (chr < 0x30 || chr > 0x39) {
      u8 _chr = chr | 0x20; // lowercase
      // [a-z_]
      if ((_chr >= 0x61 && chr <= 0x7a) || chr == 0x5f) {
        // TODO: line number
        print("identifiers may not being with a digit");
        exit(1);
      }

      // handles null, too
      streamPush(in, chr);
      return newIntegerToken(in, 0, 0);
    }

    // TODO: smarter, disable-able warnings (09 shouldn't warn)
    print("warning: octals are not written 07, they are written 0o7");
  }

  // '.'
  if (chr == 0x2e) {
    // TODO: floating-point numbers
    print("floating point literals are not implemented");
    exit(1);
  }

  u64 value = 0;

  for (;;) {
    // [\.Ee]
    if (chr == 0x2e || chr == 0x45 || chr == 0x65) {
      // TODO: floating-point numbers
      print("floating point literals are not implemented");
      exit(1);
    }

    // [^0-9]
    if (chr < 0x30 || chr > 0x39) {
      u8 _chr = chr | 0x20; // lowercase
      // [a-z]
      if ((_chr >= 0x61 && chr <= 0x7a) || chr == 0x5f) {
        // TODO: line number
        print("identifiers may not being with a digit");
        exit(1);
      }

      break;
    }

    u64 v2 = value * 10;
    if (v2 / 10 != value) {
      // TODO: line number
      print("decimal literal too large");
      exit(1);
    }

    value = v2 + (chr - 0x30); // '0'
    chr = streamShift(in);
  }

  streamPush(in, chr);
  return newIntegerToken(in, value, integerBits(value));
}

u8 expectHexDigit(Stream in) {
  u8 chr = streamShift(in);

  // [0-9]
  if (chr >= 0x30 && chr <= 0x39) {
    return <u8>(chr - 0x30); // '0'
  }

  chr |= 0x20; // lowercase

  // [a-z]
  if (chr >= 0x61 && chr <= 0x66) {
    return <u8>(chr - 0x57);
  }

  // TODO: line number
  print("unexpected character, expecting hex digit");
  exit(1);
}

void consumeComment(Stream in) {
  for (;;) {
    u8 chr = streamShift(in);

    // '*'
    if (chr == 0x2a) {
      chr = streamShift(in);

      // '/'
      if (chr == 0x2f) break;
    }

    if (chr == 0) {
      // TODO: line number
      print("unexpected EOF, expecting '*/'");
      exit(1);
    }
  }
}

bool acceptChar(Stream in, u8 chr) {
  u8 found = streamShift(in);

  if (found == chr) {
    return true;
  }

  streamPush(in, found);
  return false;
}

u8 integerBits(u64 value) {
  u8 bits = 0;

  while (value) {
    ++bits;
    value >>= 1;
  }

  return bits;
}
